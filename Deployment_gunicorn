* Ubuntu server 14
   *sudo apt-get install vim tree curl
   
* Nginx
* Gunicorn
* Django

-- Python 3.5 with venv
- We really want to use the latest Python release instead of the default 3.4 when starting a new Python project, so let's download and install 3.5.1 now.

- Run these commands in the terminal to download Python 3.5.1 source code:
```python
cd ~/Downloads
```
wget https://www.python.org/ftp/python/3.5.1/Python-3.5.1.tgz

-Extract the Python source code:

tar -xvf Python-3.5.1.tgz
- Linux is not configured by default to build the Python source code. We need to update our system package lists and install several packages to make building the Python source code possible. If you have a password on your user account, enter it when prompted to allow the installation to proceed.

sudo apt update
sudo apt install build-essential checkinstall
sudo apt install libreadline-gplv2-dev libncursesw5-dev libssl-dev 
sudo apt install libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev
sudo apt install python3-dev
-Once the packages are installed, we can configure and install Python from source.

cd Python-3.5.1
./configure
sudo make install
-Test that the installation worked properly by starting up the Python REPL:

python3.5
-If the REPL starts up properly with Python 3.5.1 in the output then we're good to go.

--Virtual environment and pip
-Python 3.5 comes with the virtual environment and pip applications so we can use them to handle our application dependencies.

-Create a directory to store virtual environments then create a virtualenv for our Django project.

cd ~
mkdir venvs
# specify the system python3 installation
python3.5 -m venv djangoproj

-Activate the virtualenv.
source ~/venvs/djangoproj/bin/activate
- We should see our prompt change so that we know the virtualenv is properly activated.
- (djangoproj) myuser@myserver $

- Now we can install Django and Green Unicorn into our virtual environment.
pip install django==1.9.7 gunicorn==19.6
- If there are no errors in the pip output then that is a good sign we can proceed.

-Create a new Django project named djangoproj, or whatever you want to name your project. Change into the directory for the new project.

cd ~
django-admin startproject djangoproj
cd djangoproj
-We can run Django using the development server with the python manage.py runserver command. However, start Django up with Gunicorn instead.
-the below line only for testing it will be changed next.

gunicorn djangoproj.wsgi
- Awesome, we can bring up our shell project in the web browser at the http://localhost:8000 or http://127.0.0.1:8000 address.
- as it is a remote server run
curl http://localhost:8000


-->next http://agiliq.com/blog/2013/08/minimal-nginx-and-gunicorn-configuration-for-djang/
-->next https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-django-with-postgres-nginx-and-gunicorn
Gunicorn 

- Create a gunicorn_conf.py file
  bind='localhost:8001'
  pidfile='gunicorn_pid'
  daemon = True
  accesslog='gunicorn_access.log'
-run 
  gunicorn -c gunicorn_config.py screenManager.wsgi

Nginx



